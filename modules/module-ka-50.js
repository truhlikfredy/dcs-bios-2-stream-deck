const buttonLogic = require('./buttonLogic.js')

buttonsDefault = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'ka-50',
        text: 'DCS\nKA-50',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'datalink',
        text: 'Datalink',
        goTo: 'datalink',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'overhead',
        text: 'Overhead',
        goTo: 'overhead',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'hud',
        text: 'HUD\nTV\nLandLight',
        goTo: 'hud',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'weapons',
        text: 'Weap',
        goTo: 'weapons',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'arbis',
        text: 'ARBIS',
        goTo: 'arbis',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'pvi800-1',
        text: 'PVI800',
        goTo: 'pvi800-1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'ap',
        text: 'AP',
        goTo: 'ap',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'flare',
        text: 'ADF\nFlare',
        goTo: 'flare',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'vhf1',
        text: 'VHF1\nR828',
        goTo: 'vhf1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'wall',
        text: 'Wall',
        goTo: 'wall',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'aux1',
        text: 'AUX',
        goTo: 'aux1',
    },
]


buttonsDatalink = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'vehicle',
        text: '1\nVehi',
        maxStatus: 0,
        apiSend: 'DLNK_TARGET_VEHICLE_BTN',
        apiGet: 'DLNK_TARGET_VEHICLE_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'aaa',
        text: '2\nAAA',
        maxStatus: 0,
        apiSend: 'DLNK_TARGET_SAM_BTN',
        apiGet: 'DLNK_TARGET_SAM_LED',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'other',
        text: '3\nOther',
        maxStatus: 0,
        apiSend: 'DLNK_TARGET_OTHER_BTN',
        apiGet: 'DLNK_TARGET_OTHER_LED',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'initIngress',
        text: 'Ingress',
        maxStatus: 0,
        apiSend: 'DLNK_TARGET_POINT_LED',
        apiGet: 'DLNK_TARGET_POINT_BTN',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: '1',
        text: 'Wing\n1',
        maxStatus: 0,
        apiSend: 'DLNK_WINGMAN_1_BTN',
        apiGet: 'DLNK_WINGMAN_1_LED'
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: '2',
        text: 'Wing\n2',
        maxStatus: 0,
        apiSend: 'DLNK_WINGMAN_2_BTN',
        apiGet: 'DLNK_WINGMAN_2_LED'
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: '3',
        text: 'Wing\n3',
        maxStatus: 0,
        apiSend: 'DLNK_WINGMAN_3_BTN',
        apiGet: 'DLNK_WINGMAN_3_LED'
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: '4',
        text: 'Wing\n4',
        maxStatus: 0,
        apiSend: 'DLNK_WINGMAN_4_BTN',
        apiGet: 'DLNK_WINGMAN_4_LED'
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'all',
        text: 'Wing\nAll',
        maxStatus: 0,
        apiSend: 'DLNK_WINGMAN_ALL_BTN',
        apiGet: 'DLNK_WINGMAN_ALL_LED'
    },      
    {   
        type: buttonLogic.types.none,
    },         
    {   
        type: buttonLogic.types.none,
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowStripeButton,
        sendState: false,
        nameId: 'erase',
        text: 'Erase',
        maxStatus: 0,
        apiSend: 'DLNK_ERASE_BTN',
        apiGet: 'DLNK_ERASE_LED'
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowStripeButton,
        sendState: false,
        nameId: 'ingressToTrg',
        text: 'Ingress\nTo',
        maxStatus: 0,
        apiSend: 'DLNK_ESCAPE_BTN',
        apiGet: 'DLNK_ESCAPE_LED'
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowStripeButton,
        sendState: false,
        nameId: 'sendMem',
        text: 'Send\nMemory',
        maxStatus: 0,
        apiSend: 'DLNK_SEND_BTN',
        apiGet: 'DLNK_SEND_LED'
    },  
    
    
]

buttonsOverhead = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'wingTipLight',
        inversed: true,
        maxStatus: 3,
        text: ['Wing-0%', 'Wing-10%', 'Wing-30%', 'Wing-100%'],
        apiSend: 'OP_NAV_LIGHTS',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'wiper',
        inversed: true,
        maxStatus: 3,
        text: ['WiperOff', 'Wiper3', 'Wiper2', 'Wiper1'],
        apiSend: 'OP_WINDSHIELD_WIPER',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'sensorHeat',
        inversed: true,
        text: ['Off', 'SensHt'],
        apiSend: 'OP_PITOT_PORT_HEAT',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'sensorHeat',
        inversed: true,
        text: ['Off', 'PilotHt'],
        apiSend: 'OP_PITOT_RAM_HEAT',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'rotorDeice',
        inversed: true,
        text: ['Off', '!RotIce'],
        apiSend: 'OP_ROTOR_DEICE',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'engineDeIceDeDust',
        inversed: true,
        text: ['Off', 'EngIceDust'],
        apiSend: 'OP_ENG_DEICE',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: 'pilotHeatTest',
        text: 'PilotHt\nTest',
        apiSend: 'OP_PITOT_HEAT_TEST',
    },   
 
]

buttonsWall = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'fire',
        text: 'Fire',
        goTo: 'wall-fire',
    },
    {   
        type: buttonLogic.types.none,
    },       
    {   
        type: buttonLogic.types.none,
    },  
    {   
        type: buttonLogic.types.none,
    },  
    

    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elec1',
        text: 'Elect',
        goTo: 'wall-electrical1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elPumps',
        text: 'Pumps',
        goTo: 'wall-pumps',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elFuel',
        text: 'Fuel',
        goTo: 'wall-fuel',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'govenorsLights',
        text: 'Govern\nLights',
        goTo: 'wall-governors-lights',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elRadio',
        text: 'Radio',
        goTo: 'wall-radio',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elEject',
        text: 'Eject',
        goTo: 'wall-eject',
    },    
]


buttonsWallEquip = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elFuel',
        text: 'Fuel',
        goTo: 'wall-fuel',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'hydrcover',
        text: 'Cover\nv',
        apiSend: 'HYD_POWER_COVER',
    },  
    {   
        type: buttonLogic.types.none,
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'govenorsLights',
        text: 'Govern\nLights',
        goTo: 'wall-governors-lights',
    },

    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'weaponCover',
        text: 'Cover\nv',
        apiSend: 'WEAPONS_POWER_COVER',
    },            
    {   
        type: buttonLogic.types.none,
    },  
    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'hydrPwr',
        inversed: true,
        text: ['HydPwr', 'OFF'],
        apiSend: 'HYD_POWER',
    },        
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'hydrPwr',
        inversed: true,
        text: ['OFF', 'TgrNav'],
        apiSend: 'NAV_POWER',
    },        
    {   
        type: buttonLogic.types.none,
    },   

    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'wepPwr',
        inversed: true,
        text: ['OFF', 'Wep-PWR'],
        apiSend: 'WEAPONS_POWER',
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'antiColBeacon',
        inversed: true,
        text: ['OFF', '!ColBeac'],
        apiSend: 'LIGHT_BEACON',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'inuAlignment',
        maxStatus: 2,
        inversed: false,
        text: ['Magne', 'FliGyro', 'Manual'],
        apiSend: 'NAV_GYRO_MAG_MAN_HDG',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'standBy',
        inversed: true,
        text: ['OFF', 'SAI'],
        apiSend: 'SAI_POWER',
    },        
]

buttonsWallEl1 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'grndcover',
        text: 'Cover\nv',
        apiSend: 'ELEC_DC_GROUND_POWER_COVER',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'bat2cover',
        text: 'Cover\nv',
        apiSend: 'ELEC_BATTERY_2_COVER',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'bat1cover',
        text: 'Cover\nv',
        apiSend: 'ELEC_BATTERY_1_COVER',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'wall-pumps',
        text: 'Pumps',
        goTo: 'wall-pumps',
    },
 
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'grndDCPowr',
        inversed: true,
        text: ['OFF', 'GND-DC'],
        apiSend: 'ELEC_DC_GROUND_POWER',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'bat2',
        inversed: true,
        text: ['OFF', 'BAT2'],
        apiSend: 'ELEC_BATTERY_2',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'bat1',
        inversed: true,
        text: ['OFF', 'BAT1'],
        apiSend: 'ELEC_BATTERY_1',
    },      
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elRadio',
        text: 'Radio',
        goTo: 'wall-radio',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'grndACPowr',
        inversed: true,
        text: ['OFF', 'GND-AC'],
        apiSend: 'ELEC_AC_GROUND_POWER',
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'leftAc',
        inversed: true,
        text: ['OFF', 'LEFT-AC'],
        apiSend: 'ELEC_AC_L_GEN',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'rightAc',
        inversed: true,
        text: ['OFF', 'RIGHT-AC'],
        apiSend: 'ELEC_AC_R_GEN',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'inverter',
        inversed: true,
        maxStatus: 2,
        text: ['Manual', 'OFF', 'Inverter'],
        apiSend: 'ELEC_DC_AC',
    },       
    
]


buttonsWallGovLights = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'lGoverCover',
        text: 'Cover\nv',
        apiSend: 'ENG_L_ENG_EEG_COVER',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'rGoverCover',
        text: 'Cover\nv',
        apiSend: 'ENG_R_ENG_EEG_COVER',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'GGtestCover',
        text: 'Cover\nv',
        apiSend: 'ENG_EEG_GG_TEST_OPER_COVER',
    },        
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'PTtestCover',
        text: 'Cover\nv',
        apiSend: 'ENG_EEG_PT1_OPER_PT2_COVER',
    },        
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'leftGov',
        inversed: true,
        text: ['OFF', 'LeftGov'],
        apiSend: 'ENG_L_ENG_EEG',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'rightGov',
        inversed: true,
        text: ['OFF', 'RightGov'],
        apiSend: 'ENG_R_ENG_EEG',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'ggTest',
        inversed: true,
        text: ['OFF', 'GGTest'],
        apiSend: 'ENG_EEG_GG_TEST_OPER',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'tkTest',
        maxStatus: 2,
        inversed: true,
        text: ['PT-1 Test', 'Operatio', 'PT-2 Test'],
        apiSend: 'ENG_EEG_PT1_OPER_PT2',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'rotor',
        inversed: true,
        text: ['OFF', 'Rotor' ],
        apiSend: 'LIGHT_ROTOR_TIP',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'formation',
        inversed: true,
        maxStatus: 3,
        text: ['Frm0%', 'Frm10%', 'Frm30%', 'Frm100%'],
        apiSend: 'LIGHT_FORMATION',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'saiAdi',
        inversed: true,
        text: ['OFF', 'SAI+ADI' ],
        apiSend: 'LIGHT_ADI_SAI',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'nightVission',
        inversed: true,
        text: ['OFF', 'NVG' ],
        apiSend: 'LIGHT_COCKPIT_NVG',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'cockpit',
        inversed: true,
        text: ['OFF', 'Cockpit' ],
        apiSend: 'LIGHT_COCKPIT',
    },      
]

buttonsWallRadio = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elec1',
        text: 'Elect',
        goTo: 'wall-electrical1',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'pumps',
        text: 'Pumps',
        goTo: 'wall-pumps',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'fuel',
        text: 'Fuel',
        goTo: 'wall-fuel',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },     
    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'spu9',
        inversed: true,
        text: ['OFF', 'IntCom'],
        apiSend: 'COMM_INTERCOM_POWER',
    },           
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'r828',
        inversed: true,
        text: ['OFF', 'VHI-1'],
        apiSend: 'COMM_VHF1_POWER',
    },           
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'r828',
        inversed: true,
        text: ['OFF', 'VHI-2'],
        apiSend: 'COMM_VHF2_POWER',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'r828',
        inversed: true,
        text: ['OFF', 'TLK'],
        apiSend: 'COMM_DATALINK_TLK_POWER',
    },              
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'r828',
        inversed: true,
        text: ['OFF', 'VHF-TLK'],
        apiSend: 'COMM_DATALINK_VHF_TLK_POWER',
    },  
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.none,
    },           
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'eject',
        text: 'Eject',
        goTo: 'wall-eject',
    },                 
]


buttonsWallFire = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elec1',
        text: 'Elect',
        goTo: 'wall-electrical1',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'pumps',
        text: 'Pumps',
        goTo: 'wall-pumps',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'fuel',
        text: 'Fuel',
        goTo: 'wall-fuel',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.redButton,
        nameId: 'leftEng',
        text: 'Left\nENG',
        maxStatus: 0,
        sendState: false,
        apiSend: 'FIREEXT_L_ENG_EXT',
        apiGet: 'FIREEXT_L_ENG_FIRE',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.redButton,
        nameId: 'apu',
        text: 'APU',
        maxStatus: 0,
        sendState: false,
        apiSend: 'FIREEXT_APU_EXT',
        apiGet: 'FIREEXT_APU_FIRE',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.redButton,
        nameId: 'rightEng',
        text: 'Right\nENG',
        maxStatus: 0,
        sendState: false,
        apiSend: 'FIREEXT_R_ENG_EXT',
        apiGet: 'FIREEXT_R_ENG_FIRE',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.redButton,
        nameId: 'vent',
        text: 'Vent',
        maxStatus: 0,
        sendState: false,
        apiSend: 'FIREEXT_VENT_EXT',
        apiGet: 'FIREEXT_VENT_FIRE',
    },            
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'slectCover',
        text: 'Cover\nv',
        apiSend: 'FIREEXT_EXT_MODE_COVER',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'slectmanCover',
        text: 'Cover\n->',
        apiSend: 'FIREEXT_AUTO_MANUAL_COVER',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'auto-manual',
        text: ['Auto', 'Manual'],
        apiSend: 'FIREEXT_AUTO_MANUAL',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'testAlarmOff',
        inversed: true,
        text: ['Off', 'Alarm'],
        apiSend: 'FIREEXT_MONITOR',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'group123',
        inversed: true,
        fontIndex: 4,
        maxStatus: 2,
        text: ['3', '1', '2'],
        apiSend: 'FIREEXT_WARN_TEST',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'testWork',
        maxStatus: 2,
        inversed: true,
        fontIndex: 5,
        text: ['Test', 'Off', 'Work'],
        apiSend: 'FIREEXT_EXT_MODE',
    },         
         
]

buttonsWallEject = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elec1',
        text: 'Elect',
        goTo: 'wall-electrical1',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'pumps',
        text: 'Pumps',
        goTo: 'wall-pumps',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'fuel',
        text: 'Fuel',
        goTo: 'wall-fuel',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },     
    {   
        type: buttonLogic.types.none,
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'ejectCover1',
        text: 'Cover\nv',
        apiSend: 'EJECT_POWER_COVER',
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'ejectCover2',
        text: 'Cover\nv',
        apiSend: 'EJECT_POWER_COVER',
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'ejectCover3',
        text: 'Cover\nv',
        apiSend: 'EJECT_POWER_COVER',
    },      
    {   
        type: buttonLogic.types.none,
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'radio',
        text: 'Radio',
        goTo: 'wall-radio',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'eject1',
        text: ['Eject1', 'OFF'],
        apiSend: 'EJECT_POWER_1',
    },           
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'eject2',
        text: ['Eject2', 'OFF'],
        apiSend: 'EJECT_POWER_2',
    },           
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'eject3',
        text: ['Eject3', 'OFF'],
        apiSend: 'EJECT_POWER_3',
    },  
    {   
        type: buttonLogic.types.none,
    },               
]

buttonsWallPumps = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elec1',
        text: 'Elect',
        goTo: 'wall-electrical1',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elFuel',
        text: 'Fuel',
        goTo: 'wall-fuel',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'gov-lights',
        text: 'Govern\nLights',
        goTo: 'wall-governors-lights',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'pumpFwd',
        inversed: true,
        text: ['OFF', 'PUMP-FWD'],
        apiSend: 'FUEL_FORWARD_PUMP_POWER',
    },        
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'pumpAft',
        inversed: true,
        text: ['OFF', 'PUMP-AFT'],
        apiSend: 'FUEL_AFT_PUMP_POWER',
    },        
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'pumpInner',
        inversed: true,
        text: ['OFF', 'PUMP-INN'],
        apiSend: 'FUEL_INNER_PUMP_POWER',
    },        
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'pumpOuter',
        inversed: true,
        text: ['OFF', 'PUMP-OUT'],
        apiSend: 'FUEL_OUTER_PUMP_POWER',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'fuelMeter',
        inversed: true,
        text: ['OFF', 'Meter'],
        apiSend: 'FUEL_METER_POWER',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elRadio',
        text: 'Radio',
        goTo: 'wall-radio',
    },   
    {   
        type: buttonLogic.types.none,
    }, 
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elEject',
        text: 'Eject',
        goTo: 'wall-eject',
    },                            
    {   
        type: buttonLogic.types.none,
    },    
    {   
        type: buttonLogic.types.none,
    },     
]

buttonsWallFuel = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'wall',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elec1',
        text: 'Elect',
        goTo: 'wall-electrical1',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'elPumps',
        text: 'Pumps',
        goTo: 'wall-pumps',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'equip',
        text: 'Equip',
        goTo: 'wall-equip',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'gov-lights',
        text: 'Govern\nLights',
        goTo: 'wall-governors-lights',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'leftCover',
        text: 'Cover\nv',
        apiSend: 'FUEL_L_ENG_VLV_COVER',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'rightCover',
        text: 'Cover\nv',
        apiSend: 'FUEL_R_ENG_VLV_COVER',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'apuCover',
        text: 'Cover\nv',
        apiSend: 'FUEL_APU_VLV_COVER',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'xfeedCover',
        text: 'Cover\nv',
        apiSend: 'FUEL_XFEED_VLV_COVER',
    },  
    {   
        type: buttonLogic.types.none,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'left',
        inversed: true,
        text: ['OFF', 'PUMP-LEFT'],
        apiSend: 'FUEL_L_ENG_VLV',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'right',
        inversed: true,
        text: ['OFF', 'PUMP-RIGHT'],
        apiSend: 'FUEL_R_ENG_VLV',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'right',
        inversed: true,
        text: ['OFF', 'PUMP-APU'],
        apiSend: 'FUEL_APU_VLV',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'right',
        inversed: true,
        text: ['OFF', 'X-FEED'],
        apiSend: 'FUEL_XFEED_VLV',
    },   
    
]


buttonsHud = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: true,
        nameId: 'handle',
        text: 'Filter',
        apiSend: 'HUD_FILTER_HANDLE',
    },  
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright-',
        increment: -4095,
        maxStatus: 65535,
        overflow: false,
        text: 'HBri\n-',
        apiSend: 'HUD_BRIGHTNESS',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright+',
        increment: +4095,
        maxStatus: 65535,
        overflow: false,
        text: 'HBri\n+',
        apiSend: 'HUD_BRIGHTNESS',
        dynamicState: true,
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'mode',
        maxStatus: 2,
        inversed: true,
        text: ['Night', 'Day', 'StandBy'],
        apiSend: 'HUD_MODE',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'polarity',
        inversed: true,
        maxStatus: 1,
        text: ['Black', 'White'],
        apiSend: 'SHKVAL_POLARITY',
    },                
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'hms-',
        increment: -4095,
        maxStatus: 65535,
        overflow: false,
        text: 'HMS\n-',
        apiSend: 'HMS_BRIGHTNESS',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'hms+',
        increment: +4095,
        maxStatus: 65535,
        overflow: false,
        text: 'HMS\n+',
        apiSend: 'HMS_BRIGHTNESS',
        dynamicState: true,
    },  
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright-',
        increment: -4095,
        maxStatus: 65535,
        overflow: false,
        text: 'Bri\n-',
        apiSend: 'SHKVAL_BRIGHTNESS',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright+',
        increment: +4095,
        maxStatus: 65535,
        overflow: false,
        text: 'Bri\n+',
        apiSend: 'SHKVAL_BRIGHTNESS',
        dynamicState: true,
    },      
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'contrast-',
        increment: -4095,
        maxStatus: 65535,
        overflow: false,
        text: 'Cont\n-',
        apiSend: 'SKHVAL_CONTRAST',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'contrast+',
        increment: +4095,
        maxStatus: 65535,
        overflow: false,
        text: 'Cont\n+',
        apiSend: 'SKHVAL_CONTRAST',
        dynamicState: true,
    },        {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'laserCode',
        inversed: true,
        fontIndex: 5,
        maxStatus: 2,
        text: ['Las1', 'Las2', 'Las3'],
        apiSend: 'LASER_CODE',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'declutter',
        inversed: true,
        maxStatus: 1,
        text: ['Full', 'Declu'],
        apiSend: 'HUD_DECLUTTER',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'land',
        text: 'Landing\nlights',
        goTo: 'land',
    },    
]


buttonsLand = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'hud',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'landingLight',
        inversed: true,
        maxStatus: 2,
        text: ['Retract', 'On', 'Extend'],
        apiSend: 'LIGHT_LANDING_ON_RETR_OFF',
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'mainBackup',
        maxStatus: 1,
        text: ['Main', 'Back'],
        apiSend: 'LIGHT_LANDING_MAIN_BACKUP',
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'declutter',
        fontIndex: 4,
        inversed: true,
        maxStatus: 2,
        text: ['Outer', 'Auto*', 'Inner'],
        apiSend: 'ADF_NDB_MODE',
    },      
    {   
        type: buttonLogic.types.none,
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: 'msgOff',
        text: 'VMU\ncease',
        apiSend: 'VOICE_MSG_OFF',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: 'msgRepeat',
        text: 'VMU\nrepeat',
        apiSend: 'VOICE_MSG_REPEAT',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'declutter',
        fontIndex: 4,
        inversed: true,
        maxStatus: 1,
        text: ['Emerg', 'Norm'],
        apiSend: 'VOICE_MSG_EMER',
    },      
    
     
        
]


buttonsWeapons = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'masterArm',
        inversed: true,
        text: ['Moff', 'MArm'],
        apiSend: 'WEAPONS_MASTER_ARM',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.green7seg,
        sendState: false,
        nameId: 'wepType',
        apiGet: 'WEAPONS_DISPLAY_STORE_TYPE',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.green7seg,
        sendState: false,
        nameId: 'wepRem',
        apiGet: 'WEAPONS_DISPLAY_WEAPON_REMAIN',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.green7seg,
        sendState: false,
        nameId: 'ammoRem',
        apiGet: 'WEAPONS_DISPLAY_CANNON_REMAIN',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.none,
    },
    {   
        type: buttonLogic.types.none,
    },       
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: 'jetExt',
        text: 'Jet\nExt',
        apiSend: 'WEAPONS_JETTISON_EXT',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'jetArm',
        inversed: true,
        text: ['Joff', 'JArm'],
        apiSend: 'WEAPONS_JETTISON_ARM_MODE',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: 'jetAtgm',
        text: 'Jet\nATGM',
        apiSend: 'WEAPONS_EXPEDITE_ATGM_JETTISON',
    },
    {   
        type: buttonLogic.types.none,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'cAutoMan',
        inversed: true,
        text: ['Auto', 'Manual'],
        apiSend: 'WEAPONS_MANUAL_AUTO',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'cBurst',
        fontIndex: 5,
        maxStatus: 2,
        inversed: true,
        text: ['low', 'med', 'long'],
        apiSend: 'WEAPONS_CANNON_BURST',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'cHe',
        inversed: true,
        text: ['AP', 'HE'],
        apiSend: 'WEAPONS_CANNON_ROUND',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'cRate',
        inversed: true,
        text: ['High', 'Low'],
        apiSend: 'WEAPONS_CANNON_RATE',
    },

]


buttonsPvio800_3 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'pvi800-1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        stateToText: (state) => Math.abs(Math.ceil(((state - 32767.5)+65535)%65535 / 1820.4166))%36,
        nameId: 'mag10',
        text: 'n/a',
        apiGet: 'ZMS3_MAGVAR_CNT_100_10',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        stateToText: (state) => Math.round(state / 655.35)/10,
        nameId: 'mag',
        text: 'n/a',
        apiGet: 'ZMS3_MAGVAR_CNT_1',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'mag-',
        increment: -4095,
        sendState: false,
        text: 'mag\n-',
        apiSend: 'ZMS3_MAGVAR_SELECTOR',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'mag+',
        increment: +4095,
        sendState: false,
        maxStatus: 65535,
        overflow: true,
        text: 'mag\n+',
        apiSend: 'ZMS3_MAGVAR_SELECTOR',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'mode',
        fontIndex: 7,
        maxStatus: 4,
        inversed: true,
        text: ['OFF', 'CHECK', 'EDIT', 'OPER', 'SIM'],
        apiSend: 'PVI_MODES',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'inu',
        inversed: true,
        text: ['UPDATE', 'INU'],
        apiSend: 'PVI_INU_FIX',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'power',
        inversed: true,
        text: ['OFF', 'ON'],
        apiSend: 'PVI_POWER',
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright-',
        increment: -4095,
        maxStatus: 65535,
        overflow: false,
        text: 'BR\n-',
        apiSend: 'PVI_BRIGHTNESS',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright+',
        increment: +4095,
        maxStatus: 65535,
        overflow: false,
        text: 'BR\n+',
        apiSend: 'PVI_BRIGHTNESS',
        dynamicState: true,
    },    

    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'id',
        maxStatus: 3,
        fontIndex: 7,
        text: ['1', '2', '3', '4'],
        apiSend: 'DLNK_SELF_ID',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'masterMode',
        maxStatus: 3,
        text: ['OFF', 'Rx-Only', 'Wingman', 'CMDR'],
        apiSend: 'DLNK_MASTER_MODE',
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'scan-',
        increment: -1,
        maxStatus: 7,
        overflow: false,
        text: 'Scan\n-',
        apiSend: 'SHKVAL_OPTICS_SCAN_RATE',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'scan+',
        increment: 1,
        maxStatus: 7,
        overflow: false,
        text: 'Scan\n+',
        apiSend: 'SHKVAL_OPTICS_SCAN_RATE',
        dynamicState: true,
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'northSouth',
        text: ['North', 'South'],
        apiSend: 'PSHK7_NORTH_SOUTH',
    },           
    
]


buttonsPvio800_2 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.green7seg,
        sendState: false,
        nameId: 'line1',
        apiGet: 'PVI_LINE1_TEXT',
        goTo: 'pvi800-1',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'fixPnt',
        text: 'FIX\nPNT',
        maxStatus: 0,
        apiSend: 'PVI_FIXPOINTS_BTN',
        apiGet: 'PVI_FIXPOINTS_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'selfCord',
        text: 'SELF\nCOOR',
        maxStatus: 0,
        apiSend: 'PVI_SELF_COOR_BTN',
        apiGet: 'PVI_SELF_COOR_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'trueHead',
        text: 'T-HEAD\nTIME/DI',
        maxStatus: 0,
        apiSend: 'PVI_THDG_TIME_RANGE_BTN',
        apiGet: 'PVI_THDG_TIME_RANGE_LED',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'inuprec',
        text: 'INU\nPREC',
        maxStatus: 0,
        apiSend: 'PVI_INU_PRECISE_ALIGN_BTN',
        apiGet: 'PVI_INU_PRECISE_ALIGN_LED',
    }, 

    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.green7seg,
        sendState: false,
        nameId: 'line2',
        apiGet: 'PVI_LINE2_TEXT',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'airfield',
        text: 'AIR\nFIELD',
        maxStatus: 0,
        apiSend: 'PVI_AIRFIELDS_BTN',
        apiGet: 'PVI_AIRFIELDS_LED',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'dtaDh',
        text: 'DTA\nDH',
        maxStatus: 0,
        apiSend: 'PVI_DTA_DH_BTN',
        apiGet: 'PVI_DTA_DH_LED',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'headra',
        text: 'HEAD/RA\nTGT PNT',
        maxStatus: 0,
        apiSend: 'PVI_BEARING_RANGE_BTN',
        apiGet: 'PVI_BEARING_RANGE_LED',
    },             
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'inunorm',
        text: 'INU\nNORM',
        maxStatus: 0,
        apiSend: 'PVI_INU_NORMAL_ALIGN_BTN',
        apiGet: 'PVI_INU_NORMAL_ALIGN_LED',
    },    

    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'wpt',
        text: 'WPT',
        maxStatus: 0,
        apiSend: 'PVI_WAYPOINTS_BTN',
        apiGet: 'PVI_WAYPOINTS_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'navTarget',
        text: 'NAV\nTGT',
        maxStatus: 0,
        apiSend: 'PVI_TARGETS_BTN',
        apiGet: 'PVI_TARGETS_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'windSpeedHead',
        text: 'WIND\nDI/SP',
        maxStatus: 0,
        apiSend: 'PVI_WIND_HDG_SPEED_BTN',
        apiGet: 'PVI_WIND_HDG_SPEED_LED',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'inuRerun',
        text: 'INU\nRERUN',
        maxStatus: 0,
        apiSend: 'PVI_INU_INFLIGHT_REALIGN_BTN',
        apiGet: 'PVI_INU_INFLIGHT_REALIGN_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.greenStripeButton,
        sendState: false,
        nameId: 'initPnt',
        text: 'INIT\nPNT',
        maxStatus: 0,
        apiSend: 'PVI_INIT_PNT_BTN',
        apiGet: 'PVI_INIT_PNT_LED',
    },
]


buttonsPvio800_1 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '1',
        text: '-\n1',
        apiSend: 'PVI_1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '2',
        text: '2',
        apiSend: 'PVI_2',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '3',
        text: '3',
        apiSend: 'PVI_3',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowStripeButton,
        nameId: 'reset',
        text: 'Reset',
        maxStatus: 0,
        apiSend: 'PVI_RESET_BTN',
        apiGet: 'PVI_RESET_LED',
        sendState: false,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'pvi800-2',
        text: 'PVI800\nfunc',
        goTo: 'pvi800-2',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '4',
        text: '4',
        apiSend: 'PVI_4',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '5',
        text: '5',
        apiSend: 'PVI_5',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '6',
        text: '6',
        apiSend: 'PVI_6',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '0',
        text: '+\n0',
        apiSend: 'PVI_0',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'pvi800-3',
        text: 'PVI800\nPVTz-800',
        goTo: 'pvi800-3',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '7',
        text: '7',
        apiSend: 'PVI_7',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '8',
        text: '8',
        apiSend: 'PVI_8',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: '9',
        text: '9',
        apiSend: 'PVI_9',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowStripeButton,
        nameId: 'enter',
        text: 'Enter',
        maxStatus: 0,
        apiSend: 'PVI_ENTER_BTN',
        apiGet: 'PVI_ENTER_LED',
        sendState: false,
    },    
]


buttonsArbis = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'pwr',
        inversed: true,
        text: ['Off', 'On'],
        apiSend: 'ABRIS_POWER',
    },
    {   
        type: buttonLogic.types.none,
    },
    {   
        type: buttonLogic.types.textToggle,
        defaultStatus: 0,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright-',
        increment: -4095,
        maxStatus: 65535,
        overflow: false,
        text: 'Bri\n-',
        apiSend: 'ABRIS_BRIGHTNESS',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bright+',
        increment: +4095,
        maxStatus: 65535,
        overflow: false,
        text: 'Bri\n+',
        apiSend: 'ABRIS_BRIGHTNESS',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        nameId: '1',
        text: '^\n1',
        apiSend: 'ABRIS_BTN_1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        nameId: '2',
        text: '^\n2',
        apiSend: 'ABRIS_BTN_2',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        nameId: '3',
        text: '^\n3',
        apiSend: 'ABRIS_BTN_3',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        nameId: '4',
        text: '^\n4',
        apiSend: 'ABRIS_BTN_4',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        nameId: '5',
        text: '^\n5',
        apiSend: 'ABRIS_BTN_5',
    },

    {   
        type: buttonLogic.types.none,
    },
    {   
        type: buttonLogic.types.none,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'cur-',
        increment: -4095,
        sendState: false,
        maxStatus: 65535,
        overflow: true,
        text: 'Cur\n-',
        apiSend: 'ABRIS_CURSOR_ROT',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'curBtn',
        text: 'Cur\nBTN',
        apiSend: 'ABRIS_CURSOR_BTN',
        sendState: false,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'cur+',
        increment: +4095,
        sendState: false,
        overflow: true,
        maxStatus: 65535,
        text: 'Cur\n+',
        apiSend: 'ABRIS_CURSOR_ROT',
        dynamicState: true,
    },
    
]


buttonsAp = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.redButton,
        sendState: false,
        nameId: 'lwrReset',
        text: 'LWR\nRESET',
        apiSend: 'LWR_RESET',
        apiGet: 'LWR_RESET',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowButton,
        sendState: false,
        nameId: 'rotorRpm',
        maxStatus: 0,
        text: 'R RPM',
        apiSend: 'SC_ROTOR_RPM_BTN',
        apiGet: 'SC_ROTOR_RPM_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        sendState: false,
        nameId: 'lampTest',
        text: 'Lamp\nTest',
        apiSend: 'SC_LAMPS_TEST',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.redButton,
        sendState: false,
        nameId: 'master',
        text: 'MASTER\nCAUTION',
        apiSend: 'SC_MASTER_CAUTION_BTN',
        apiGet: 'SC_MASTER_CAUTION_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blueButton,
        sendState: false,
        nameId: 'bank',
        text: 'BANK\nHOLD',
        apiSend: 'AP_BANK_HOLD_BTN',
        apiGet: 'AP_BANK_HOLD_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blueButton,
        sendState: false,
        nameId: 'pitch',
        text: 'PITCH\nHOLD',
        apiSend: 'AP_PITCH_HOLD_BTN',
        apiGet: 'AP_PITCH_HOLD_LED',
    },
    {   
        type: buttonLogic.types.none,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blueButton,
        sendState: false,
        nameId: 'fd',
        text: 'FD\nAP',
        apiSend: 'AP_FD_BTN',
        apiGet: 'AP_FD_LED',
    },
    {   
        type: buttonLogic.types.none,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blueButton,
        sendState: false,
        nameId: 'hdg',
        text: 'HDG\nHOLD',
        apiSend: 'AP_HDG_HOLD_BTN',
        apiGet: 'AP_HDG_HOLD_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blueButton,
        sendState: false,
        nameId: 'alt',
        text: 'ALT\nHOLD',
        apiSend: 'AP_ALT_HOLD_BTN',        
        apiGet: 'AP_ALT_HOLD_LED',
    },
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 2,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'altMode',
        fontIndex: 4, 
        text: ['BR', '--', 'RD'],
        apiSend: 'AP_BARO_RALT',
    },
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 2,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'hdgMode',
        fontIndex: 4, 
        text: ['DH', '--', 'DT'],
        apiSend: 'AP_DH_DT',
    },
]


buttonsFlare = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },
    {   
        type: buttonLogic.types.none,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        stateToText: (state) => state == 1 ? 'Serv1' : state == 0 ? 'Serv0' : (state-1),
        nameId: 'channel',
        text: 'n/a',
        apiGet: 'ADF_CHANNEL',
        dynamicState: true,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'ch-',
        increment: -1,
        maxStatus: 9,
        text: 'Ch\n-',
        apiSend: 'ADF_CHANNEL',
        dynamicState: true,
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'ch+',
        maxStatus: 9,
        overflow: false,
        text: 'Ch\n+',
        apiSend: 'ADF_CHANNEL',
        dynamicState: true,
    },      
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'vol-',
        increment: -4095,
        // sendState: false,
        overflow: false,
        maxStatus: 65535,
        text: 'Vol\n-',
        apiSend: 'ADF_VOLUME',
        dynamicState: true,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'vol+',
        increment: +4095,
        // sendState: false,
        overflow: false,
        maxStatus: 65535,
        text: 'Vol\n+',
        apiSend: 'ADF_VOLUME',
        dynamicState: true,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'adfNdb',
        // inversed: true,
        text: ['TLF', 'TLG'],
        apiSend: 'ADF_TLF_TLG',
    },
    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'adfTest',
        sendState: false,
        maxStatus: 0,
        text: 'ADF\nTest',
        apiSend: 'ADF_TEST',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'compasAnt',
        // inversed: true,
        text: ['ANT', 'CMPS'],
        apiSend: 'ADF_CMPS_ANT',
    },   
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 1,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'power',
        inversed: true,
        text: ['Off', 'On'],
        apiSend: 'FLARES_POWER',
    },
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 0,
        scheme: buttonLogic.colorScheme.grayButton,
        customFontColor: '#dd0000',
        nameId: 'red',
        text: 'Red',
        sendState: false,
        apiSend: 'FLARES_RED',
    },
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 0,
        scheme: buttonLogic.colorScheme.grayButton,
        customFontColor: '#00dd00',
        nameId: 'green',
        text: 'Green',
        sendState: false,
        apiSend: 'FLARES_GREEN',
    },
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 0,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'white',
        text: 'White',
        sendState: false,
        apiSend: 'FLARES_WHITE',
    },
    {   
        type: buttonLogic.types.textToggle,
        maxStatus: 0,
        scheme: buttonLogic.colorScheme.grayButton,
        customFontColor: '#dddd00',
        nameId: 'yellow',
        text: 'Yellow',
        sendState: false,
        apiSend: 'FLARES_YELLOW',
    },
    
]


buttonsVhf1 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        sendState: false,
        stateToText: (state) => state+1,
        nameId: 'channel',
        text: 'n/a',
        apiGet: 'R828_CHANNEL',
        dynamicState: true,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'ch+',
        increment: -1,
        overflow: true,
        maxStatus: 9,
        text: 'Ch\n-',
        apiSend: 'R828_CHANNEL',
        dynamicState: true,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'ch+',
        overflow: true,
        maxStatus: 9,
        text: 'Ch\n+',
        apiSend: 'R828_CHANNEL',
        dynamicState: true,
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'autoTune',
        sendState: false,
        text: 'Auto\ntune',
        apiSend: 'R828_TUNER',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowButton,
        nameId: 'autoTuneLamp',
        sendState: false,
        text: 'Tuning',
        apiGet: 'R828_TUNER_LAMP',
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'noiseReduction',
        inversed: true,
        text: ['Off', 'NRedu'],
        apiSend: 'R828_SQUELCH',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'vol-',
        overflow: false,
        increment: -4095,
        maxStatus: 655535,
        text: 'Vol\n-',
        apiSend: 'R828_VOLUME',
        dynamicState: true,
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'vol+',
        overflow: false,
        increment: 4095,
        maxStatus: 655535,
        text: 'Vol\n+',
        apiSend: 'R828_VOLUME',
        dynamicState: true,
    },                      
    {   
        type: buttonLogic.types.none,
    },
]


buttonsAux1 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'default',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'leftGov',
        sendState: false,
        text: 'Left\nGov',
        apiSend: 'ENG_L_EGT_GOVERNOR',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'rightGov',
        sendState: false,
        text: 'Right\nGov',
        apiSend: 'ENG_R_EGT_GOVERNOR',
    },    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'vibr',
        sendState: false,
        text: 'Vibra',
        apiSend: 'ENG_VIBR_MONITOR',
    },     
    {   
        type: buttonLogic.types.none,
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'aux2',
        text: 'LWS\nCounter',
        goTo: 'aux2',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'eject_test',
        sendState: false,
        text: 'Eject\ntest',
        apiSend: 'EJECT_SYS_TEST_BTN',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'eject-',
        overflow: false,
        increment: -1,
        maxStatus: 6,
        text: 'Eject-',
        apiSend: 'EJECT_SYS_SELECTOR',
    },          
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'eject+',
        overflow: false,
        maxStatus: 6,
        text: 'Eject+',
        apiSend: 'EJECT_SYS_SELECTOR',
    }, 
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'voiceTest',
        maxStatus: 0,
        sendState: false,
        text: 'Voice\ntest',
        apiSend: 'VOICE_MSG_SYS_TEST',
    },     
    {   
        type: buttonLogic.types.none,
    },  
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        stateToText: (state) => { 
            var texts = [ 'S-8KOM', 'S-8TsM', 'S-13', 'S-24', 'S-8M HE', 'UPK-23', 'n/i', 'n/i', 'n/i', 'n/i', 'n/i', 'n/i' ] 
            return texts[state]},
        text: 'n/a',
        nameId: 'balVal',
        apiGet: 'PPK800_BAL_DATA',
    },         
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bal-',
        overflow: false,
        increment: -1,
        maxStatus: 10,
        text: 'Bal-',
        apiSend: 'PPK800_BAL_DATA',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.blackButton,
        nameId: 'bal+',
        overflow: false,
        maxStatus: 10,
        text: 'Bal+',
        apiSend: 'PPK800_BAL_DATA',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'inuPower',
        inversed: true,
        text: ['off', 'INU'],
        apiSend: 'PPK800_INU_POWER',
    },      
]


buttonsAux2 = [
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.gotoButton,
        nameId: 'back',
        text: '<- Back',
        goTo: 'aux1',
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.yellowButton,
        nameId: 'lwsOper',
        text: 'LWS\nOper',
        maxStatus: 0,
        apiGet: 'LWS_OPER',
        sendState: false,
    },
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'lwsPower',
        inversed: true,
        text: ['OFF', 'LWS'],
        apiSend: 'LWS_POWER',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'lwsTest',
        maxStatus: 0,
        sendState: false,
        text: 'LWS\ntest',
        apiSend: 'LWS_TEST',
    },   
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.none,
    },                    
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'u26pwr_cover',
        text: 'Cover\nv',
        apiSend: 'UV26_POWER_COVER',
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.grayButton,
        nameId: 'u26test_cover',
        text: 'Cover\nv',
        apiSend: 'UV26_TEST_COVER',
    },   
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.none,
    },   
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'u26Power',
        inversed: true,
        text: ['OFF', 'U26-PWR'],
        apiSend: 'UV26_POWER',
    },     
    {   
        type: buttonLogic.types.textToggle,
        scheme: buttonLogic.colorScheme.switch,
        nameId: 'u26test',
        inversed: true,
        text: ['OFF', 'TEST'],
        apiSend: 'UV26_TEST',
    },     
    
]


module.exports = {
    name: "ka-50",
    namespaces: [
        { name: 'default',               buttons: buttonsDefault},
        { name: 'hud',                   buttons: buttonsHud},
        { name: 'overhead',              buttons: buttonsOverhead},
        { name: 'datalink',              buttons: buttonsDatalink},
        { name: 'land',                  buttons: buttonsLand},
        { name: 'weapons',               buttons: buttonsWeapons},
        { name: 'arbis',                 buttons: buttonsArbis},
        { name: 'pvi800-1',              buttons: buttonsPvio800_1},
        { name: 'pvi800-2',              buttons: buttonsPvio800_2},
        { name: 'pvi800-3',              buttons: buttonsPvio800_3},
        { name: 'ap',                    buttons: buttonsAp},
        { name: 'flare',                 buttons: buttonsFlare},
        { name: 'vhf1',                  buttons: buttonsVhf1},
        { name: 'wall',                  buttons: buttonsWall},
        { name: 'wall-electrical1',      buttons: buttonsWallEl1},   
        { name: 'wall-pumps',            buttons: buttonsWallPumps},
        { name: 'wall-fuel',             buttons: buttonsWallFuel},        
        { name: 'wall-radio',            buttons: buttonsWallRadio},
        { name: 'wall-eject',            buttons: buttonsWallEject},
        { name: 'wall-fire',             buttons: buttonsWallFire},
        { name: 'wall-equip',            buttons: buttonsWallEquip},
        { name: 'wall-governors-lights', buttons: buttonsWallGovLights},        
        { name: 'aux1',                  buttons: buttonsAux1},
        { name: 'aux2',                  buttons: buttonsAux2},
    ]
}

