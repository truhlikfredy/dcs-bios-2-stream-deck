const buttonLogic = require('../../buttonLogic.js')

module.exports = {
    name: 'adf-flare',
    buttons : [
        {   
            text: '<- Back',
            goTo: 'default',
        },
        {},     
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.blackButton,
            sendState: false,
            stateToText: (state) => state == 1 ? 'Serv1\nchan' : state == 0 ? 'Serv0\nchan' : (state-1) + '\nchan',
            nameId: 'channel',
            text: 'n/a',
            apiGet: 'ADF_CHANNEL',
            dynamicState: true,
        },
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.blackButton,
            increment: -1,
            maxStatus: 9,
            text: '-\nChannel',
            apiSend: 'ADF_CHANNEL',
            dynamicState: true,
        },      
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.blackButton,
            maxStatus: 9,
            overflow: false,
            text: '+\nChannel',
            apiSend: 'ADF_CHANNEL',
            dynamicState: true,
        },      
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.blackButton,
            increment: -4095,
            overflow: false,
            maxStatus: 65535,
            text: '-\nVolume',
            apiSend: 'ADF_VOLUME',
            dynamicState: true,
        },    
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.blackButton,
            increment: +4095,
            overflow: false,
            maxStatus: 65535,
            text: '+\nVolume',
            apiSend: 'ADF_VOLUME',
            dynamicState: true,
        },    
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.switch,
            text: ['TLF', 'TLG'],
            apiSend: 'ADF_TLF_TLG',
        },
        
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.grayButton,
            sendState: false,
            maxStatus: 0,
            text: 'ADF\nTest',
            apiSend: 'ADF_TEST',
        },    
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.switch,
            text: ['CMPS', 'ANT' ],
            apiSend: 'ADF_CMPS_ANT',
        },   
        {   
            type: buttonLogic.types.textToggle,
            scheme: buttonLogic.colorScheme.switch,
            inversed: true,
            text: ['Off', 'On'],
            apiSend: 'FLARES_POWER',
        },
        {   
            type: buttonLogic.types.textToggle,
            maxStatus: 0,
            scheme: buttonLogic.colorScheme.grayButton,
            customFontColor: '#dd0000',
            text: 'Red\nflare',
            sendState: false,
            apiSend: 'FLARES_RED',
        },
        {   
            type: buttonLogic.types.textToggle,
            maxStatus: 0,
            scheme: buttonLogic.colorScheme.grayButton,
            customFontColor: '#00dd00',
            text: 'Green\nflare',
            sendState: false,
            apiSend: 'FLARES_GREEN',
        },
        {   
            type: buttonLogic.types.textToggle,
            maxStatus: 0,
            scheme: buttonLogic.colorScheme.grayButton,
            text: 'White\nflare',
            sendState: false,
            apiSend: 'FLARES_WHITE',
        },
        {   
            type: buttonLogic.types.textToggle,
            maxStatus: 0,
            scheme: buttonLogic.colorScheme.grayButton,
            customFontColor: '#dddd00',
            text: 'Yellow\nflare',
            sendState: false,
            apiSend: 'FLARES_YELLOW',
        },
    ]
}